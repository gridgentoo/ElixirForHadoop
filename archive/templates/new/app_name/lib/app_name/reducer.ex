defmodule <%= app_module %>.Reducer do
  @moduledoc """
  This module contains the implementation of the <%= app_module %> reducing phase.
  """
  use Vessel.Reducer

  # Invoked once before the first set of input is read.
  #
  # You can carry out any initial steps in this callback, and can modify the Job
  # context as required for your application logic.
  #
  # You may safely remove this callback if you have no custom logic implemented.
  def setup(context) do
    context
  end

  # Invoked for every key/values pair generated by the mapper executable.
  #
  # The key here is a key as emitted by the mapper executable. The values param
  # contains a list of values written against the given key. Although order may
  # appear to be consistent with the mapper, it should not be relied upon.
  #
  # This is where you should transform and emit your values as your business
  # logic requires. You can write values using `Vessel.write/2`.
  def reduce(_key, _values, context) do
    context
  end

  # Invoked once after the final set of input is read.
  #
  # This is the appropriate place to remove temporary files, close connections,
  # and any other cleanup operations which might be required.
  #
  # You may safely remove this callback if you have no custom logic implemented.
  def cleanup(context) do
    context
  end

end
